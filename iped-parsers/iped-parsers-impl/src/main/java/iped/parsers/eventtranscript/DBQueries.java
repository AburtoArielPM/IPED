package iped.parsers.eventtranscript;

public final class DBQueries {

    public static final String HISTORY = "SELECT"
        + " UserSID,"
        + " json_extract(JSONPayload,'$.data.CorrelationGuid') AS CorrelationGuid,"
        + " Timestamp,"
        + " replace(group_concat(DISTINCT TagName), ',', ';') AS TagNames,"
        + " replace(group_concat(DISTINCT EventName), ',', ';') AS EventNames,"
        + " URL,"
        + " ReferURL,"
        + " App,"
        + " replace(group_concat(DISTINCT nullif(PageTitle, '')), ',', ';') AS PageTitles,"
        + " JSONPayload"
        + " FROM ("
        + " SELECT events_persisted.sid AS UserSID,"
        + "     datetime((events_persisted.timestamp/10000000) - 11644473600, 'unixepoch', 'UTC') AS Timestamp,"
        + "     tag_descriptions.tag_name AS TagName,"
        + "     events_persisted.full_event_name AS FullEventName,"
        + "     replace(replace(substr(distinct events_persisted.full_event_name,39),'Microsoft.',''),'WebBrowser.HistoryJournal.','') AS 'EventName',"
        + "     json_extract(events_persisted.payload,'$.ext.app.name') AS App,"
        + "     events_persisted.compressed_payload_size AS CompressedPayloadSize,"
        + "     json_extract(events_persisted.payload,'$.data.navigationUrl') AS URL,"
        + "     json_extract(events_persisted.payload,'$.data.referUrl') AS ReferURL,"
        + "     json_extract(events_persisted.payload,'$.data.PageTitle') AS PageTitle,"
        + "     events_persisted.payload AS JSONPayload"
        + " FROM"
        + "     events_persisted"
        + "     LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash"
        + "     LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id"
        + "     INNER JOIN provider_groups ON events_persisted.provider_group_id = provider_groups.group_id"
        + " WHERE"
        + "     (tag_descriptions.tag_name='Browsing History' AND events_persisted.full_event_name LIKE '%HistoryAddUrl') OR"
        + "     (tag_descriptions.tag_name='Product and Service Usage' AND events_persisted.full_event_name LIKE '%HistoryAddUrlEx')"
        + " )"
        + " GROUP BY CorrelationGuid"
        + " ORDER BY Timestamp DESC";

        public static final String INVENTORY_APPS = "SELECT"
        + " datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS 'Timestamp',"
        + " json_extract(events_persisted.payload,'$.ext.utc.seq') AS 'seq',"
        + " tag_descriptions.tag_name AS TagName,"
        + " replace(events_persisted.full_event_name,'Microsoft.Windows.Inventory.Core.Inventory','') AS 'EventName',"
        + " events_persisted.full_event_name AS 'FullEventName',"
        + " json_extract(events_persisted.payload,'$.data.Type') AS 'Type',"
        + " json_extract(events_persisted.payload,'$.data.Name') AS 'Name',"
        + " json_extract(events_persisted.payload,'$.data.PackageFullName') AS 'PackageFullName',"
        + " json_extract(events_persisted.payload,'$.data.Version') AS 'Version',"
        + " json_extract(events_persisted.payload,'$.data.Publisher') AS 'Publisher',"
        + " json_extract(events_persisted.payload,'$.data.RootDirPath') AS 'RootDirPath',"
        + " json_extract(events_persisted.payload,'$.data.HiddenArp') AS 'HiddenArp',"
        + " json_extract(events_persisted.payload,'$.data.InstallDate') AS 'InstallDate',"
        + " json_extract(events_persisted.payload,'$.data.Source') AS 'Source',"
        + " json_extract(events_persisted.payload,'$.data.OSVersionAtInstallTime') AS 'OSVersionAtInstallTime',"
        + " json_extract(events_persisted.payload,'$.data.InstallDateMsi') AS 'MsiInstallDate',"
        + " json_extract(events_persisted.payload,'$.data.MsiPackageCode') AS 'MsiPackageCode',"
        + " json_extract(events_persisted.payload,'$.data.MsiProductCode') AS 'MsiProductCode',"
        + " json_extract(events_persisted.payload,'$.data.baseData.objectInstanceId') AS 'InstanceId',"
        + " trim(json_extract(events_persisted.payload,'$.ext.user.localId'),'m:') AS 'UserId',"
        + " sid AS 'UserSID',"
        + " events_persisted.payload AS JSONPayload"
        + " FROM"
        + "     events_persisted"
        + "     LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash"
        + "     LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id"
        + " WHERE"
        + " FullEventName like 'Microsoft.Windows.Inventory.Core.Inventory%' and"
        + " TagName = 'Software Setup and Inventory'"
        + " ORDER BY cast(Timestamp AS integer) desc";

    public static final String APP_INTERACTIVITY = "SELECT"
    + " datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS 'Timestamp',"
    + " json_extract(events_persisted.payload,'$.ext.utc.seq') AS 'seq',"
    + " tag_descriptions.tag_name AS 'TagName',"
    + " replace(events_persisted.full_event_name,'Win32kTraceLogging.','') AS 'EventName',"
    + " replace(substr(json_extract(events_persisted.payload,'$.data.AggregationStartTime'),1,19), 'T', ' ') AS 'AggregationStartTime', "
    + " json_extract(events_persisted.payload,'$.data.AggregationDurationMS') AS 'AggregationDurationMS', "
    + " CASE WHEN substr(json_extract(events_persisted.payload,'$.data.AppId'),1,1) is 'W' "
    + "      THEN substr(json_extract(events_persisted.payload,'$.data.AppId'),93)"
    + "      WHEN substr(json_extract(events_persisted.payload,'$.data.AppId'),1,1) is 'U' "
    + "      THEN substr(json_extract(events_persisted.payload,'$.data.AppId'),3)"
    + "      else json_extract(events_persisted.payload,'$.data.AppId') "
    + "      end AS 'AppId',"
    + " CASE WHEN substr(json_extract(events_persisted.payload,'$.data.AppId'),1,1) is 'W' "
    + "     THEN substr(json_extract(events_persisted.payload,'$.data.AppVersion'),21,(instr(substr(json_extract(events_persisted.payload,'$.data.AppVersion'),21),'!')-1) )"
    + "     end AS 'PE Header CheckSum',	"
    + " CASE substr(json_extract(events_persisted.payload,'$.data.AppId'),1,1) "
    + "     WHEN 'W' THEN 'Win' "
    + "     WHEN 'U' THEN 'UWP' "
    + "     end AS 'Type',	"
    + " json_extract(events_persisted.payload,'$.data.WindowWidth')||'x'||json_extract(events_persisted.payload,'$.data.WindowHeight') AS 'WindowSize(WxH)',	"
    + " json_extract(events_persisted.payload,'$.data.MouseInputSec') AS 'MouseInputSec', "
    + " json_extract(events_persisted.payload,'$.data.InFocusDurationMS') AS 'InFocusDurationMS', "
    + " json_extract(events_persisted.payload,'$.data.UserActiveDurationMS') AS 'UserActiveDurationMS', "
    + " json_extract(events_persisted.payload,'$.data.SinceFirstInteractivityMS') AS 'SinceFirstInteractivityMS', "
    + " json_extract(events_persisted.payload,'$.data.UserOrDisplayActiveDurationMS') AS 'UserOrDisplayActiveDurationMS', "
    + " json_extract(events_persisted.payload,'$.data.FocusLostCount') AS 'FocusLostCount',"
    + " CASE WHEN substr(json_extract(events_persisted.payload,'$.data.AppId'),1,1) is 'W'	"
    + "     THEN upper(substr(json_extract(events_persisted.payload,'$.data.AppId'),52,40)) "
    + "     end AS 'SHA1',	"
    + " CASE WHEN substr(json_extract(events_persisted.payload,'$.data.AppId'),1,1) is 'W'	"
    + "    THEN upper(substr(json_extract(events_persisted.payload,'$.data.AppId'),3,44)) "
    + "    end AS 'ProgramId',"
    + " upper(json_extract(events_persisted.payload,'$.data.AppSessionId')) AS 'AppSessionId',"
    + " trim(json_extract(events_persisted.payload,'$.ext.user.localId'),'m:') AS 'UserId',"
    + " sid AS 'UserSID',"
    + " logging_binary_name,"
    + " events_persisted.payload AS JSONPayload"
    + " FROM events_persisted "
    + " join event_tags on events_persisted.full_event_name_hash = event_tags.full_event_name_hash"
    + " join tag_descriptions on event_tags.tag_id = tag_descriptions.tag_id "
    + " where "
    + "  events_persisted.full_event_name in ('Win32kTraceLogging.AppInteractivity','Win32kTraceLogging.AppInteractivitySummary' )"
    + " ORDER BY cast(Timestamp AS integer) desc";
    
    public static final String DEVICE_PNP = "SELECT"
        + " datetime( ( events_persisted.timestamp / 10000000 ) - 11644473600, 'unixepoch' ) AS 'Timestamp',"
        + " json_extract(events_persisted.payload,'$.ext.utc.seq') AS 'seq', "
        + " tag_descriptions.tag_name AS TagName,"
        + " replace(events_persisted.full_event_name,'Microsoft.Windows.Inventory.Core.Inventory','') AS 'EventName',"
        + " events_persisted.full_event_name AS 'FullEventName',"
        + " json_extract(events_persisted.payload,'$.data.InstallDate') AS 'InstallDate',"
        + " json_extract(events_persisted.payload,'$.data.FirstInstallDate') AS 'FirstInstallDate',"
        + " "
        + " json_extract(events_persisted.payload,'$.data.DriverVerDate') AS 'DriverVerDate',"
        + " json_extract(events_persisted.payload,'$.data.Provider') AS 'Provider',"
        + " json_extract(events_persisted.payload,'$.data.Manufacturer') AS 'Manufacturer',"
        + " json_extract(events_persisted.payload,'$.data.Model') AS 'Model',"
        + " json_extract(events_persisted.payload,'$.data.BusReportedDescription') AS 'BusDescription',"
        + " json_extract(events_persisted.payload,'$.data.Description') AS 'Description',"
        + " json_extract(events_persisted.payload,'$.data.Enumerator') AS 'Enumerator',"
        + " json_extract(events_persisted.payload,'$.data.baseData.objectInstanceId') AS 'InstanceId',"
        + " trim(json_extract(events_persisted.payload,'$.ext.user.localId'),'m:') AS 'UserId',"
        + " sid AS 'UserSID',"
        + " events_persisted.payload AS JSONPayload"
        + " FROM "
        + "     events_persisted"
        + " LEFT JOIN event_tags ON events_persisted.full_event_name_hash = event_tags.full_event_name_hash"
        + " LEFT JOIN tag_descriptions ON event_tags.tag_id = tag_descriptions.tag_id"
        + " WHERE "
        + " FullEventName like 'Microsoft.Windows.Inventory.Core.InventoryDevicePnp%'"
        + " ORDER BY cast(Timestamp AS integer) DESC;";

}
